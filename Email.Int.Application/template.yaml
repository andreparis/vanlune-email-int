AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Application.
Parameters:
  SecurityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
  SubNetId1:
    Type: 'AWS::EC2::Subnet::Id'
  SubNetId2:
    Type: 'AWS::EC2::Subnet::Id'
  SubNetId3:
    Type: 'AWS::EC2::Subnet::Id'
  EnvironmentType:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    ConstraintDescription: 'Must be dev, uat or prod'
Mappings:
  EnvironmentVariablesMap:
    Function.Properties.CodeUri.Bucket:
      dev: vanlune-bin-dev
      uat: vanlune-bin-uat
      prod: vanlune-bin-prod
    Function.Properties.Email.Int.Bucket:
      dev: vanlune-database
      uat: vanlune-database
      prod: vanlune-database
    Stage.ApiGateway:
      dev: Dev
      uat: Uat
      prod: Prod
    DbSecretName: 
      dev: vanlune-db-dev
      uat: vanlune-db-dev
      prod: vanlune-db-dev
Resources:
  SendEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-email-int
      Handler: >-
        Email.Int.Application::Email.Int.Application.Function::SendEmail
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Email.Int.zip
      MemorySize: 256
      Timeout: 120
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        PutResource:
          Type: SQS
          Properties:
            Queue: !GetAtt 
              - SendEmailQueue
              - Arn
            BatchSize: 10            
      Environment:
        Variables:
          EMAIL_SEND: "andreparis.comp@gmail.com"
          EMAIL_TO: "andreparis.comp@gmail.com"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
          - !Ref SubNetId3
  SendEmailDlq:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: vanlune-email-int-dlq
      Handler: >-
        Email.Int.Application::Email.Int.Application.Function::SendEmailDlq
      Runtime: dotnetcore3.1
      CodeUri:
        Bucket: !FindInMap 
          - EnvironmentVariablesMap
          - Function.Properties.CodeUri.Bucket
          - !Ref EnvironmentType
        Key: Email.Int.zip
      MemorySize: 256
      Timeout: 120
      Role: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/role-lambda-vanlune']]
      Policies:
        - AWSLambdaBasicExecutionRole
      Tracing: Active
      Events:
        PutResource:
          Type: SQS
          Properties:
            Queue: !GetAtt 
              - SendEmailDeadLetterQueue
              - Arn
            BatchSize: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubNetId1
          - !Ref SubNetId2
          - !Ref SubNetId3
  #SQS Queues
  SendEmailQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: vanlune-send-email
      VisibilityTimeout: 120
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 
            - SendEmailDeadLetterQueue
            - Arn
        maxReceiveCount: 3
  SendEmailDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: send-email-dlq
      VisibilityTimeout: 120
  #SNS Queues and Subscriptions
  SendEmailTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: send-email-topic
  SendEmailQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: sqs
      Region: !Ref 'AWS::Region'
      RawMessageDelivery: true      
      Endpoint: !GetAtt 
           - SendEmailQueue
           - Arn      
      TopicArn: !Join
           - ':'
           - - 'arn:aws:sns'
             - !Ref 'AWS::Region'
             - !Ref 'AWS::AccountId'
             - 'send-email-topic'
  # Policies
  SendEmailQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: !Join
          - ""
          - - !GetAtt SendEmailQueue.Arn
            - '/default-policy'
        Statement:
          -
            Effect: Allow
            Principal: '*'
            Action:
              - "SQS:SendMessage" 
              - "SQS:ReceiveMessage"
            Resource: !GetAtt
              - SendEmailQueue
              - Arn
      Queues: 
        - !Ref SendEmailQueue